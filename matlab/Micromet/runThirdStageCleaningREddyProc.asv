function runThirdStageCleaningREddyProc(yearIn,siteID,Ustar_scenario,yearsToProcess)
% runThirdStageCleaningREddyProc(yearIn,siteID)
%
% This function invokes Micromet third-stage cleaning R-script.
% Usually, it's called from fr_automated_cleaning()
%
% Arguments
%   yearIn          - year to clean
%   Ustar_scenario  - 'fast' (default) and 'slow' (see REddyProc for details)
%   yearsToProcess  - 1 (default) or more. REddyProc can use more years 
%                     for gap-filling even when outputing one year only
%
% Zoran Nesic               File created:       Oct 25, 2022
%                           Last modification:  Oct 31, 2022
%

% Revisions
%

    if ~ispc
        error('This function is not compatible with macOS, yet!\n');
    end
    
    % Prepare input parameters, create defaults if needed
    strYearIn = num2str(yearIn);        % convert yearIn to string
    arg_default('Ustar_scenario','fast')
    arg_default('yearsToProcess',1);


    % find path to R database_functions folder
    pthBiometR = findBiometRpath;
    % find path to database
    pthDatabase = findDatabasePath;

    % This one should be under ../Database/Calculation_procedures\TraceAnalysis_ini\siteID:
    pthBatch = fullfile(pthDatabase,'Calculation_procedures','TraceAnalysis_ini',siteID);

    % Find path to the newest version of Rscript
    pthRbin = findRPath;    

    % create all file paths
    % log files go under ../database/Calculation_Procedures\TraceAnalysis_ini\siteID\log
    if ~exist(fullfile(pthBatch,'log'),'dir')
        mkdir(fullfile(pthBatch,'log'))
    end    
    pthLogFile = fullfile(pthBatch,'log',[siteID '_ThirdStageCleaning.log']);
    % the *.bat file that runs Rscript also goes into the log folder 
    pthBatchFile = fullfile(pthBatch,'log',[siteID '_ThirdStageCleaning.bat']);
    % The cleaning script Run_REddyProc_ThirdStage_siteID.R is under ../Biomet.net/R
    pthCleaningScript = fullfile(pthBiometR,['Run_REddyProc_ThirdStage.R']);
    
    % Create an input file for StageThreeREddyProc() function and pass 
    % all the arguments to it. Store that file with .bat and .log files:
    pthIniFile = fullfile(pthBatch,'log',[siteID '_ThirdStageCleaningParameters.ini']);
    
    % Get the function stack (it will be needed to extract this function's name)
    st=dbstack;
    
%     % Store the ini parameters in pthIniFile
%     fidIni = fopen(pthIniFile,'w');
%     if fidIni <0
%         error('Could not open %s file!\n',pthIniFile);
%     end
%     fprintf(fidIni,'----------------------------------------------------------\n');
%     fprintf(fidIni,'This file is automatically generated by Matlab function:\n');
%     fprintf(fidIni,' %s.m\n',st(1).name);
%     fprintf(fidIni,' %s\n',datestr(now));
%     fprintf(fidIni,'----------------------------------------------------------\n');
%     fprintf(fidIni,'site,%s\n',siteID);
%     fprintf(fidIni,'years,%s\n',strYearIn);
%     fprintf(fidIni,'db_root,%s\n',pthDatabase);
%     fprintf(fidIni,'fx_path,%s\n',pthBiometR);
%     fprintf(fidIni,'Ustar_scenario,%s\n',Ustar_scenario);
%     fprintf(fidIni,'yearsToProcess,%d\n',yearsToProcess);
%     fclose(fidIni);
    
    
    % create the batch file command line 
    cmdLine = ['"' pthRbin '" "'  pthCleaningScript '" ' siteID ...
               ' ' strYearIn ' "' pthDatabase '" "' pthBiometR '" ' ...
               ' 2> "' pthLogFile '" 1>&2'];
    tic;
    tv_start = now;
    % Create the batch file that calls R
    fidBatch = fopen(pthBatchFile,'w');
    if fidIni <0
        error('Could not open %s file!\n',fidBatch);
    end
    fprintf(fidBatch,'REM ----------------------------------------------------------\n');
    fprintf(fidBatch,'REM  This file is automatically generated by Matlab function:\n');
    fprintf(fidBatch,'REM  %s.m\n',st(1).name);
    fprintf(fidBatch,'REM  %s\n',datestr(now));
    fprintf(fidBatch,'REM ----------------------------------------------------------\n');
    fprintf(fidBatch,'%s\n',cmdLine);
    fclose(fidBatch);
    [~,cmdOutput] = system(pthBatchFile); %#ok<ASGLU>

    % When R is finshed, print the footer in the log file
    fidLog = fopen(pthLogFile,'a');      
    if fidLog > 0    
        fprintf(fidLog,'\n\n\n\n');
        fprintf(fidLog,'=============================================================\n');
        fprintf(fidLog,'Rscript:      %s\n',pthRbin);
        fprintf(fidLog,'Start:        %s\n',datestr(tv_start));
        fprintf(fidLog,'End:          %s\n',datestr(now));
        fprintf(fidLog,'Elapsed time: %6.1f min\n',toc/60);
        fprintf(fidLog,'==============================================================\n'); 
        fclose(fidLog);
    end

end

function biometRpath = findBiometRpath
    funA = which('read_bor');     % First find the path to Biomet.net by looking for a standard Biomet.net functions
    tstPattern = [filesep 'Biomet.net' filesep];
    indFirstFilesep=strfind(funA,tstPattern);
    biometRpath = fullfile(funA(1:indFirstFilesep-1),tstPattern,'R', 'database_functions');
end

function databasePath = findDatabasePath
    databasePath = biomet_path('yyyy');
    indY = strfind(databasePath,'yyyy');
    databasePath = databasePath(1:indY-2); 
end

function Rpath = findRPath
    pathMatlab = matlabroot;
    indY = strfind(upper(pathMatlab),[filesep 'MATLAB']);
    pathBin = fullfile(pathMatlab(1:indY-1));
    s = dir(fullfile(pathBin,'R','R-*')); 
    if length(s) < 1
        error ('Cannot find location of R inside of %s\n',pathBin);
    end
    Rpath = "";
    N = 0;
    for cntFolders = 1:length(s)
        if s(cntFolders).name > Rpath
            Rpath = s(cntFolders).name;
            N = cntFolders;
        end
    end
    Rpath = fullfile(s(N).folder,s(N).name,'bin','Rscript.exe');
end
        

